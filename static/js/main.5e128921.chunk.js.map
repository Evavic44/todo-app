{"version":3,"sources":["Components/TodoForm.js","Components/Todo.js","Components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","count","setCount","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","newCount","onSubmit","id","text","className","placeholder","onChange","name","ref","autocomplete","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","key","TodoList","setTodos","test","newTodos","console","log","updatedTodos","removedArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e128921.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\nfunction TodoForm(props) {\r\n  const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n  const [count, setCount] = useState(0);\r\n\r\n  const inputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    inputRef.current.focus();\r\n  });\r\n\r\n  const handleChange = e => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    const newCount = count + 1\r\n    setCount(newCount)\r\n\r\n    props.onSubmit({\r\n      id:newCount,\r\n      text: input,\r\n    });\r\n    \r\n    setInput('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className='todo-form'>\r\n      {props.edit ? (\r\n        <>\r\n          <input\r\n            placeholder='Update your item'\r\n            value={input}\r\n            onChange={handleChange}\r\n            name='text'\r\n            ref={inputRef}\r\n            className='todo-input edit'\r\n            autocomplete=\"off\"\r\n          />\r\n          <button onClick={handleSubmit} className='todo-button edit'>\r\n            Update\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <input\r\n            placeholder='Add your task here'\r\n            value={input}\r\n            onChange={handleChange}\r\n            name='text'\r\n            className='todo-input'\r\n            ref={inputRef}\r\n            autocomplete=\"off\"\r\n          />\r\n          <button onClick={handleSubmit} className='todo-button'>\r\n            Add todo\r\n          </button>\r\n        </>\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { useState } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport { MdDeleteForever } from 'react-icons/md';\r\nimport { AiFillEdit } from 'react-icons/ai';\r\nimport {TiTick} from 'react-icons/ti';\r\n\r\n\r\nconst Todo = ({ todos, completeTodo, removeTodo, updateTodo }) => {\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: ''\r\n  });\r\n\r\n  const submitUpdate = value => {\r\n    updateTodo(edit.id, value);\r\n    setEdit({\r\n      id: null,\r\n      value: ''\r\n    });\r\n  };\r\n\r\n  if (edit.id) {\r\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n  }\r\n\r\n  return todos.map((todo, index) => (\r\n    <div\r\n      className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n      key={index}\r\n    >\r\n      <div key={todo.id}>\r\n        {todo.text}\r\n      </div>\r\n      <div className='icons'>\r\n        <TiTick\r\n        onClick={() => completeTodo(todo.id)}\r\n        className='done-icon'\r\n        />\r\n        <MdDeleteForever\r\n          onClick={() => removeTodo(todo.id)}\r\n          className='delete-icon'\r\n        />\r\n        <AiFillEdit\r\n          onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n          className='edit-icon'\r\n        />\r\n      </div>\r\n    </div>\r\n  ));\r\n};\r\n\r\nexport default Todo;\r\n","import React, { useState } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\n\r\nfunction TodoList() {\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  const addTodo = todo => {\r\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n      return;\r\n    }\r\n\r\n    const newTodos = [todo, ...todos];\r\n\r\n    setTodos(newTodos);\r\n    console.log(...todos);\r\n  };\r\n\r\n  const updateTodo = (todoId, newValue) => {\r\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n      return;\r\n    }\r\n\r\n    setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\r\n  };\r\n\r\n  const removeTodo = id => {\r\n    const removedArr = [...todos].filter(todo => todo.id !== id);\r\n\r\n    setTodos(removedArr);\r\n  };\r\n\r\n  const completeTodo = id => {\r\n    let updatedTodos = todos.map(todo => {\r\n      if (todo.id === id) {\r\n        todo.isComplete = !todo.isComplete;\r\n      }\r\n      return todo;\r\n    });\r\n    setTodos(updatedTodos);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>Todo WebApp</h1>\r\n      <TodoForm onSubmit={addTodo} />\r\n      <Todo\r\n        todos={todos}\r\n        completeTodo={completeTodo}\r\n        removeTodo={removeTodo}\r\n        updateTodo={updateTodo}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TodoList from './Components/TodoList'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='todo-app'>\r\n      <TodoList/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}